<?php
/**
 * Settings for delivery module
 * @file
 */
define('DELIVERY_PERMISSION', 'administer delivery');

/**
 * implements hook_help().
 * @param $path
 * @param $arg
 * @return string
 */
function delivery_help($path, $arg) {
    switch ($path) {
        case "admin/help#delivery":
            return '<p>' . t("Logic for delivery date") . '</p>';
            break;
    }
}

function delivery_init() {
    drupal_add_library('system', 'ui');
    $path = drupal_get_path('module', 'delivery');
    $path_to_css = $path . '/css/delivery.css';
    $path_to_js = $path . '/js/m.js';
    drupal_add_js($path_to_js);
    drupal_add_css($path_to_css);
}

/**
 * Implement hook_permission()
 * @return type
 */
function delivery_permission() {
  return array(
    DELIVERY_PERMISSION => array(
      'title' => t('Administer Delivery module'),
      'description' => t('Perform administration tasks for Delivery module.'),
    ),
  );
}


/**
 * Implement hook_menu()
 * @return string
 */
function delivery_menu() {
    $items = array();
    $items['admin/config/workflow/delivery'] = array(
        'title' => 'Manual dates',
        'description' => 'Manual dates',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('delivery_manual_form'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/config/workflow/delivery'] = array(
        'title' => 'Manual dates',
        'description' => 'Manual dates',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('delivery_manual_form'),
        'access arguments' => array('access content'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
    );
    return $items;
}

function delivery_commerce_checkout_page_info() {
    $checkout_pages = array();

    $checkout_pages['delivery_date'] = array(
        'name' => t('Delivery Date'),
        'title' => t('Delivery date'),
        'weight' => 2,
    );

    return $checkout_pages;
}

/**
 * Implements hook_libraries_info().
 */
function delivery_libraries_info() {
    $libraries['MultiDatesPicker'] = array(
        'name' => 'MultiDatesPicker',
        'vendor url' => 'http://multidatespickr.sourceforge.net/',
        'download url' => 'https://sourceforge.net/projects/multidatespickr/',
        'version arguments' => array(
            'file' => 'jquery-ui.multidatespicker.js',
            'pattern' => '@(?i:MultiDatesPicker) v([0-9\.a-z]+)@',
            'lines' => 5,
        ),
        'files' => array(
            'js' => array(
                'jquery-ui.multidatespicker.js',
            ),
            'css' => array(
                'prettify.css'
            ),
        ),
    );

    return $libraries;
}

/**
 * Implements hook_commerce_checkout_pane_info()
 * @return string
 */
function delivery_commerce_checkout_pane_info() {
  $panes = array();  
  drupal_add_css(drupal_get_path('module', 'delivery') . '/css/delivery.css');
  
  $panes['delivery'] = array(
    'title' => t('Delivery date'),
    'page' => 'delivery_date',
    'weight' => 10,
    'file' => 'includes/delivery.checkout_pane.inc',
    'base' => 'delivery_pane',
    'collapsible' => FALSE,  
    'collapsed' => FALSE,
    'callbacks' => array(
      'checkout_form' => 'delivery_pane_checkout_form', 
      'checkout_form_submit' => 'delivery_pane_checkout_form_submit',
    ),  
    'fieldset' => FALSE,  
  );
  
  return $panes;
}
/**
 * 
 * @param type $checkout_pane
 * @return type
 */
function delivery_pane_settings_form($form, $form_state) {
    //return system_settings_form($form);
    return $form;
}

/**
 * Implement hook_form()
 * @param $form
 * @param $form_state
 * @return mixed
 */
function delivery_manual_form($form, $form_state){
    libraries_load('MultiDatesPicker');
    $year = date('Y');
    $month = date('m');
    $current_day = date('j');
    $num = cal_days_in_month(CAL_GREGORIAN, $month, $year);
    $max = $num - $current_day;
    $weekends = variable_get('delivery_manual');
    //krumo($weekends);
    $form['delivery_manual'] = array(
        '#type' => 'textfield',
        '#size' => '25',
        '#default_value' => $weekends,
        '#title' => t('Select a weekends'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save weekends',
    );
    return $form;
}

/**
 * Implement hook_form_validate()
 * @param $form
 * @param $form_state
 * @return mixed
 */
function delivery_manual_form_validate($form, $form_state){
//
    return $form;
}

/**
 * Implement hook_form_submit
 * @param $form
 * @param $form_state
 * @return mixed
 */
function delivery_manual_form_submit($form, $form_state) {
    $string = $form_state['values']['delivery_manual'];
    $array = explode(',', $string);

    variable_set('delivery_manual', $array);
    drupal_set_message(t('Weekends has been saved.'));
    return $form;
}
/**
 * Show date in the order
 * @param type $entity
 * @param type $entity_type
 * @param type $view_mode
 * @param type $langcode
 */
function delivery_entity_view($entity, $entity_type, $view_mode, $langcode) {
    if ($entity_type == 'commerce_order') {
        $content = array();
        if (isset($entity->data['delivery_pane_field_display'])) {
            $data = $entity->data['delivery_pane_field_display'];
        }
        $content[] = array(
            '#type' => 'item',
            '#title' => t('Date'),
            '#markup' => date('d F Y, l', strtotime($data)),
        );
        if (isset($entity->data['delivery_pane_field_time_slot']) && $entity->data['delivery_pane_field_time_slot'] != NULL) {
            $content[] = array(
                '#type' => 'item',
                '#title' => t('Time slot'),
                '#markup' => $entity->data['delivery_pane_field_time_slot'],
            );
        }

        $markup = '<div class="delivery_view_order">' . t('Desired delivery date:') . '</div>';
        $markup .= drupal_render($content);
        $markup .= '</div>';

        $entity->content['delivery'] = array(
            '#weight' => 10,
            '#markup' => $markup,
            '#access' => commerce_order_access($entity),
        );
    }
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @param type $checkout_pane
 * @param type $order
 */
function delivery_pane_checkout_form_submit($form, &$form_state, $checkout_pane, $order) {
    $pane_id = $checkout_pane['pane_id'];
    $pane_values = $form_state['values'][$pane_id];
    
    if (isset($pane_values['delivery_pane_field_display']) || isset($pane_values['delivery_date'])) {
        $order->data['delivery_pane_field_display'] = $pane_values['delivery_pane_field_display'];
        $order->data['delivery_pane_field_time_slot'] = $pane_values['delivery_date'];
    } elseif (isset($pane_values['delivery_pane_field_display_1'])) {
        $order->data['delivery_pane_field_display'] = $pane_values['delivery_pane_field_display_1'];
    }

    commerce_order_save($order);
    variable_del('choosed'); // we del variable after commerce order save because we need to show current date in date popup
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @param type $order
 */
 function delivery_pane_checkout_ajax_callback($form, $form_state,$order){
     $order = $form_state['order'];
 }
 